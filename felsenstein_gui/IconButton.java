
import java.awt.*;
import java.awt.event.*;

/** 
 * A small button with a VCR-like icon on it. The icon button can only
 * display one of a pre-defined set of icons, including Play, Pause,
 * Stop, Rewind, FForward, Step, BackStep and UnTangle
 * 
 * @author Anders Mikkelsen
 */
public class IconButton extends Canvas
{
    /** 
     * ID of play button
     * 
     */
    public static int Play     = 0;

    /** 
     * ID of pause button
     * 
     */
    public static int Pause    = 1;

    /** 
     * ID of stop button
     * 
     */
    public static int Stop     = 2;

    /** 
     * ID of rewind button
     * 
     */
    public static int Rewind   = 3;

    /** 
     * ID of fast forward button
     * 
     */
    public static int FForward = 4;

    /** 
     * ID of step forward button
     * 
     */
    public static int Step     = 5;

    /** 
     * ID of step backwards button
     * 
     */
    public static int BackStep = 6;

    /** 
     * ID of un-tangle button
     * 
     */
    public static int UnTangle = 7;

    /** 
     * Type (ID) of this button
     * 
     */
    private int type;

    /** 
     * Off-screen copy of the button face - to respond to paint events. All drawing
     * is done only on this image which is then copied to the canvas
     * 
     */
    Image image_buffer;

    /** 
     * Graphics for the off-screen copy
     * 
     */
    Graphics image_graphics;


    /** 
     * Width of an icon button
     * 
     */
    int width = 25;

    /** 
     * Height of an icon button
     * 
     */
    int height = 25;

    /** 
     * Border color
     * 
     */
    Color dark,bright;

    /** 
     * Action command for this button
     * 
     */
    String action_command;

    /** 
     * Action listener listening on this button
     * 
     */
    ActionListener aListener;

    /** 
     * Status message for this button - this is what is displayed in the
     * status bar when the mouse is moved over this button
     * 
     */
    String stat_msg;

    /** 
     * Make a new icon button
     * 
     * @param type type of the new button (integer ID)
     */
    public IconButton(int type)
    {
	super();
	this.type = type;
	setBackground(GUIConfig.buttonbgcolor);

	dark = getBackground().darker();
	bright = getBackground().brighter();

	addMouseListener(new smallMouseListener());
	is_enabled = true;
	setSize(getPreferredSize());
    }

    /** 
     * Set action command for this button (ie. the string put in
     * action events generated by this button)
     * 
     * @param s the new action command
     */
    public void setActionCommand(String s) { action_command = s; }

    /** 
     * Set an action listener for this button
     * 
     * @param s the new action listener
     */
    public void setActionListener(ActionListener s) { aListener = s; }


    /** 
     * Allocate buffer image when connecting to native code
     * 
     */
    public void addNotify()
    {
	super.addNotify();

	Dimension d = getSize();
		
	image_buffer = createImage(d.width,d.height);
	image_graphics = image_buffer.getGraphics();

	//grp = getGraphics();
    }

    /** 
     * Set the status string for this button (ie. the text to display
     * in the status bar when the mouse is moved across this button)
     * 
     * @param s the new status message
     */
    public void setStatusMessage(String s) { stat_msg = s; }

    /** 
     * Set pen color
     * 
     * @param c the new pen color
     */
    private void setRenderColor(Color c)
    {
	image_graphics.setColor(c);
    }

    /** 
     * Draw a line on the buffer image
     * 
     * @param x1 top left x-coordinate
     * @param y1 top left y-coordinate
     * @param x2 bottom right x-coordinate
     * @param y2 bottom right y-coordinate
     */
    private void renderLine(int x1, int y1, int x2, int y2)
    {
	image_graphics.drawLine(x1,y1,x2,y2);	
    }

    /** 
     * Draw a filled rectangle
     * 
     * @param x top left x-coordinate
     * @param y top left y-coordinateq
     * @param width width of the rectangle
     * @param height height of the rectangle
     */
    private void renderFilledRect(int x, int y, int width, int height)
    {
	image_graphics.fillRect(x,y,width,height);
    }

    /** 
     * Draw the shaded border around the button
     * 
     * @param up false if the button shuld seem pressed, true otherwise
     */
    private void paintBorder(boolean up)
    {	
	Dimension d = getSize();
	int width,height;

	width =  (int)d.width - 1;
	height = (int)d.height - 1;

	setRenderColor(up?bright:dark);
	renderLine(0,0,width,0);
	renderLine(0,0,0,height);

	setRenderColor(up?dark:bright);
	renderLine(width,1,width,height);
	renderLine(1,height,width,height);

	Graphics g = getGraphics();
	if (g!=null)
	    g.drawImage(image_buffer,0,0,this);
    }

    /** 
     * Indication whether this button is enabled or not
     * 
     */
    private boolean is_enabled;
    /** 
     * Fade the face of the button to make it appear disabled
     * 
     */
    private void renderChecker()
    {
	Dimension d = getSize();
	int i,j;
	
	if (is_enabled || image_graphics==null) return;
	
	setRenderColor(new Color(90,90,90));
	for (i=1; i<d.height-2; i+=2)
	    for (j=1; j<d.width-2; j+=2)
		renderLine(j,i,j,i);
    }

    /** 
     * Erase this button to background color
     * 
     */
    private void clearFace()    
    {
	Dimension d = getSize();
	if (image_graphics==null) return;

	setRenderColor(getBackground());
	renderFilledRect(1,1,d.width-2,d.height-2);
    }

    /** 
     * Paint a play-like arrow on this button
     * 
     * @param forward true if the arrow shuld point left to right, false 
     *     otherwise
     * @param xoffset the amount (pixels) to offset this button in x-direction
     *      from center
     */
    private void paintArrow(boolean forward, int xoffset)
    {
	int i,j,x,start,len,width,height;
	Dimension d = getSize();

	int medy = d.height/2;
	int medx = d.width/2 + xoffset;
	
	renderLine(medx-3,medy,medx+4,medy);
	renderLine(medx-3,medy-1,medx+4,medy-1);

	if (forward) {
	    renderLine(medx-3,medy-2,medx+2,medy-2);
	    renderLine(medx-3,medy-3,medx  ,medy-3);
	    renderLine(medx-3,medy-4,medx-2,medy-4);
	    
	    renderLine(medx-3,medy+1,medx+2,medy+1);
	    renderLine(medx-3,medy+2,medx  ,medy+2);
	    renderLine(medx-3,medy+3,medx-2,medy+3);
	} else {
	    renderLine(medx-1,medy-2,medx+4,medy-2);
	    renderLine(medx+1,medy-3,medx+4,medy-3);
	    renderLine(medx+3,medy-4,medx+4,medy-4);
	    
	    renderLine(medx-1,medy+1,medx+4,medy+1);
	    renderLine(medx+1,medy+2,medx+4,medy+2);
	    renderLine(medx+3,medy+3,medx+4,medy+3);
	}
    }

    /** 
     * Paint a play button
     * 
     */
    private void paintPlay()
    {
	paintArrow(true,0);
    }

    /** 
     * Paint a step button
     * 
     */
    private void paintStep()
    {
	Dimension d = getSize();

	paintArrow(true,0);
	renderFilledRect(d.width/2+3,d.height/2-4,2,8);
    }

    /** 
     * Paint a back-step button
     * 
     */
    private void paintBackStep()
    {
	Dimension d = getSize();

	paintArrow(false,0);
	renderFilledRect(d.width/2-3,d.height/2-4,2,8);
    }

    /** 
     * Paint a pause button
     * 
     */
    private void paintPause() 
    {
	int width, height;
	Dimension d = getSize();

	width = 3;
	height = 8;

	renderFilledRect((int)d.width/2-2-width, (int)(d.height-height)/2, width, height);
	renderFilledRect((int)d.width/2+1, (int)(d.height-height)/2, width, height);
    }

    /** 
     * Paint a rewind button
     * 
     */
    private void paintRewind()
    {
	paintArrow(false,-3);
	paintArrow(false,2);
    }

    /** 
     * Paint a fast-forward button
     * 
     */
    private void paintFForward()
    {
	paintArrow(true,-3);
	paintArrow(true,2);
    }

    /** 
     * Paint an untangle button
     * 
     */
    private void paintUntangle()
    {
	Dimension d = getSize();
	
	int hx = d.width/2;
	int hy = d.height/2;

	renderLine(hx-8,hy-3,hx-3,hy-3);
	renderLine(hx-8,hy-2,hx-3,hy-2);
	renderLine(hx-8,hy+3,hx-3,hy+3);
	renderLine(hx-8,hy+2,hx-3,hy+2);

	renderLine(hx+8,hy-3,hx+3,hy-3);
	renderLine(hx+8,hy-2,hx+3,hy-2);
	renderLine(hx+8,hy+3,hx+3,hy+3);
	renderLine(hx+8,hy+2,hx+3,hy+2);

	renderLine(hx-3,hy-3,hx+3,hy+3);
	renderLine(hx-3,hy-2,hx+3,hy+2);

	renderLine(hx-3,hy+3,hx+3,hy-3);
	renderLine(hx-3,hy+2,hx+3,hy-2);
    }

    /** 
     * Paint a stop button - not implemented
     * 
     */
    private void paintStop() { }

    /** 
     * Paint the face of this button by checking the type and
     * calling the appropriate face-painting method
     * 
     */
    private void paintFace()
    {
	if (image_graphics == null) return;
	setRenderColor(Color.black);

	while (true) {
	    if (type == Play) {
		paintPlay();
		break;
	    }
	    if (type == Pause) {
		paintPause();
		break;
	    }
	    if (type == Stop) {
		paintStop();
		break;
	    }
	    if (type == Rewind) {
		paintRewind();
		break;
	    }
	    if (type == FForward) {
		paintFForward();
		break;
	    }
	    if (type == Step) {
		paintStep();
		break;
	    }
	    if (type == BackStep) {
		paintBackStep();
		break;
	    }
	    if (type == UnTangle) {
		paintUntangle();
		break;
	    }
	    break;
	}
    }

    /** 
     * Set the preferred size of an icon button
     * 
     */
    public Dimension getPreferredSize()
    {
	return new Dimension(22,22);
    }

    /** 
     * Change enabling of this button
     * 
     * @param b true if the button should be enabled, false otherwise
     */
    public void setEnabled(boolean b)
    {
	super.setEnabled(b);
	Graphics g = getGraphics();

	is_enabled = b;
	if (b) {
	    clearFace();
	    paintFace();
	} else
	    renderChecker();

	if (g != null)
	    g.drawImage(image_buffer,0,0,this);
    }

    /** 
     * Callback - update the face of the button
     * 
     * @param g graphics for this canvas
     */
    public void paint(Graphics g)
    {
	super.paint(g);
	
	if (image_graphics == null) return;

	paintBorder(true);
	paintFace();
	renderChecker();
	
	g.drawImage(image_buffer,0,0,this);
    }


    private class smallMouseListener extends MouseAdapter
    {
        /** 
         * Indicates whether this button is currently down
         * 
         */
	private boolean is_down = false;
        /** 
         * Indicates whether the mouse has left this button. If the mouse
         * leaves the button during a mouse click, is is not regarded as a
         * button click
         * 
         */
	private boolean exited = true;

        /** 
         * The mouse has entered this canvas
         * 
         * @param e mouse event
         */
	public void mouseEntered(MouseEvent e)
	{
	    if (isEnabled() && stat_msg != null)
		StatusBar.setStatus(stat_msg);
	}

        /** 
         * Mouse has left this canvas
         * 
         * @param e mouse event
         */
	public void mouseExited(MouseEvent e)
	{
	    if (is_down) paintBorder(true);
	    is_down = false;
	    exited = true;
	}
        /** 
         * The mouse is pressed inside this canvas
         * 
         * @param e mouse event
         */
	public void mousePressed(MouseEvent e)
	{
	    is_down = true;
	    exited = false;
	    paintBorder(false);
	}
        /** 
         * Mouse is released
         * 
         * @param e mouse event
         */
	public void mouseReleased(MouseEvent e) 
	{	    
	    is_down = false;
	    paintBorder(true);

	    if (aListener != null && !exited)
		aListener.actionPerformed(new ActionEvent(this,
							  ActionEvent.ACTION_PERFORMED,
							  action_command));
	}
    }


}
