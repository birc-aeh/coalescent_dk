
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;

/**
 * Control panel much like that of a VCR
 *
 * @author Anders Mikkelsen
 */
public class Control extends Panel implements ActionListener, ControlListener, SpinListener
{
    /// The speed spinbutton
    SpinButton sb;

    /// A vector of buttons in this control panel
    Vector buttons;

    /// A animation listener triggered by the buttons in this panel
    AnimationListener aListener = null;
    
    /**
     * Make a new button
     *
     * @param s the label
     * @return a new button with the indicated label
     */
    private Button makeButton(String s)
    {
	Button b = new Button(s);
	b.setBackground(GUIConfig.buttonbgcolor);
	return b;
    }

    /**
     * Make a new label
     *
     * @param s the label (on the label)
     * @return a new label with the indicated label
     */
    private Label makeLabel(String s)
    {
	Label l = new Label(s);
	l.setForeground(GUIConfig.labelcolor);
	return l;
    }

    /**
     * Make a new control panel with the buttons given in a list
     * of button descriptions. Legal button include "Play", 
     * "Pause", "FForward", "Rewind", "Step" and "BackStep". 
     * Furthermore it is possible to add a spinbutton called
     * "Speed".
     *
     * @param button array of buttons
     */
    public Control(String button[])
    {
	int i;
	IconButton ib = null;

	Panel spanel = new Panel();
	spanel.setLayout(new FlowLayout(FlowLayout.LEFT,0,2));

	Panel bpanel = new Panel();
	bpanel.setLayout(new FlowLayout(FlowLayout.RIGHT));

	setLayout(new BorderLayout());
	add(spanel,"West");
	add(bpanel,"East");

	buttons = new Vector();
	for (i=0; i<button.length; i++) {
	    ib = null;
	    while (true) {
		if (button[i].equals("Speed")) {
		    Label l = new Label("Speed:",Label.RIGHT);
		    l.setForeground(GUIConfig.labelcolor);
		    sb = new SpinButton(4,50,0,100,10,true);
		    sb.setSpinListener(this);
		    sb.setPost('%');
		    spanel.add(l);
		    spanel.add(sb);
		    break;
		}
		if (button[i].equals("Play")) {
		    ib = new IconButton(IconButton.Play);
		    ib.setStatusMessage("Start");
		    break;
		}
		if (button[i].equals("Pause")) {
		    ib = new IconButton(IconButton.Pause);
		    ib.setStatusMessage("Pause");
		    break;
		}
		if (button[i].equals("Rewind")) {
		    ib = new IconButton(IconButton.Rewind);
		    ib.setStatusMessage("Rewind");
		    break;
		}
		if (button[i].equals("FForward")) {
		    ib = new IconButton(IconButton.FForward);
		    ib.setStatusMessage("Fast Forward");
		    break;

		}
		if (button[i].equals("Step")) {
		    ib = new IconButton(IconButton.Step);
		    ib.setStatusMessage("Step forward");
		    break;
		}
		if (button[i].equals("BackStep")) {
		    ib = new IconButton(IconButton.BackStep);
		    ib.setStatusMessage("Step backwards");
		    break;
		}
		System.err.println("Unknown button : " + button[i]);
		System.exit(1);
	    }
	    if (ib != null) {
		ib.setActionCommand(button[i]);
		ib.setActionListener(this);
		bpanel.add(ib);
		buttons.addElement(ib);
	    }
	}
	
	setButtonState(false);
    }

    
    /**
     * Set the animationlistener 
     *
     * @param a the animation listener
     */
    public void setAnimationListener(AnimationListener a)
    {
	aListener = a;
	if (sb!=null)
	    aListener.animationSpeed((int)(sb.getValue()));
    }

    /**
     * Set the state of the button in this panel
     *
     * @param enabled true if the buttons should be enabled
     */
    public void setButtonState(boolean enabled)
    {
	VectorIterator vi = new VectorIterator(buttons);
	while (vi.hasNext())
	    ((IconButton)(vi.next())).setEnabled(enabled);
    }

    /**
     * React to a change in the speed spinbutton
     *
     * @param v the new speed
     */
    public void spinValueChanged(double v)
    {
	if (aListener!=null)
	    aListener.animationSpeed((int)v);
    }

    /**
     * React to button clicks
     *
     * @param ae the action event generated by a button click
     */
    public void actionPerformed(ActionEvent ae)
    {
	String command = ae.getActionCommand();

	if (command.equals("Play")) {
	    if (aListener != null)
		aListener.animationStart();
	    return;
	}
	if (command.equals("Pause")) {
	    if (aListener != null)
		aListener.animationStop();
	    return;
	}
	if (command.equals("Rewind")) {
	    if (aListener != null)
		aListener.animationRewind();
	    return;
	}
	if (command.equals("FForward")) {
	    if (aListener != null)
		aListener.animationFlush();
	    return;
	}
	if (command.equals("Step")) {
	    if (aListener != null)
		aListener.animationStep(true);
	    return;
	}
	if (command.equals("BackStep")) {
	    if (aListener != null)
		aListener.animationStep(false);
	    return;
	}

	System.out.println("Action Performed : " + ae);
    }
}
